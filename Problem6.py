import base64
import operator

file = """HUIfTQsPAh9PE048GmllH0kcDk4TAQsHThsBFkU2AB4BSWQgVB0dQzNTTmVS
BgBHVBwNRU0HBAxTEjwMHghJGgkRTxRMIRpHKwAFHUdZEQQJAGQmB1MANxYG
DBoXQR0BUlQwXwAgEwoFR08SSAhFTmU+Fgk4RQYFCBpGB08fWXh+amI2DB0P
QQ1IBlUaGwAdQnQEHgFJGgkRAlJ6f0kASDoAGhNJGk9FSA8dDVMEOgFSGQEL
QRMGAEwxX1NiFQYHCQdUCxdBFBZJeTM1CxsBBQ9GB08dTnhOSCdSBAcMRVhI
CEEATyBUCHQLHRlJAgAOFlwAUjBpZR9JAgJUAAELB04CEFMBJhAVTQIHAh9P
G054MGk2UgoBCVQGBwlTTgIQUwg7EAYFSQ8PEE87ADpfRyscSWQzT1QCEFMa
TwUWEXQMBk0PAg4DQ1JMPU4ALwtJDQhOFw0VVB1PDhxFXigLTRkBEgcKVVN4
Tk9iBgELR1MdDAAAFwoFHww6Ql5NLgFBIg4cSTRWQWI1Bk9HKn47CE8BGwFT
QjcEBx4MThUcDgYHKxpUKhdJGQZZVCFFVwcDBVMHMUV4LAcKQR0JUlk3TwAm
HQdJEwATARNFTg5JFwQ5C15NHQYEGk94dzBDADsdHE4UVBUaDE5JTwgHRTkA
Umc6AUETCgYAN1xGYlUKDxJTEUgsAA0ABwcXOwlSGQELQQcbE0c9GioWGgwc
AgcHSAtPTgsAABY9C1VNCAINGxgXRHgwaWUfSQcJABkRRU8ZAUkDDTUWF01j
OgkRTxVJKlZJJwFJHQYADUgRSAsWSR8KIgBSAAxOABoLUlQwW1RiGxpOCEtU
YiROCk8gUwY1C1IJCAACEU8QRSxORTBSHQYGTlQJC1lOBAAXRTpCUh0FDxhU
ZXhzLFtHJ1JbTkoNVDEAQU4bARZFOwsXTRAPRlQYE042WwAuGxoaAk5UHAoA
ZCYdVBZ0ChQLSQMYVAcXQTwaUy1SBQsTAAAAAAAMCggHRSQJExRJGgkGAAdH
MBoqER1JJ0dDFQZFRhsBAlMMIEUHHUkPDxBPH0EzXwArBkkdCFUaDEVHAQAN
U29lSEBAWk44G09fDXhxTi0RAk4ITlQbCk0LTx4cCjBFeCsGHEETAB1EeFZV
IRlFTi4AGAEORU4CEFMXPBwfCBpOAAAdHUMxVVUxUmM9ElARGgZBAg4PAQQz
DB4EGhoIFwoKUDFbTCsWBg0OTwEbRSonSARTBDpFFwsPCwIATxNOPBpUKhMd
Th5PAUgGQQBPCxYRdG87TQoPD1QbE0s9GkFiFAUXR0cdGgkADwENUwg1DhdN
AQsTVBgXVHYaKkg7TgNHTB0DAAA9DgQACjpFX0BJPQAZHB1OeE5PYjYMAg5M
FQBFKjoHDAEAcxZSAwZOBREBC0k2HQxiKwYbR0MVBkVUHBZJBwp0DRMDDk5r
NhoGACFVVWUeBU4MRREYRVQcFgAdQnQRHU0OCxVUAgsAK05ZLhdJZChWERpF
QQALSRwTMRdeTRkcABcbG0M9Gk0jGQwdR1ARGgNFDRtJeSchEVIDBhpBHQlS
WTdPBzAXSQ9HTBsJA0UcQUl5bw0KB0oFAkETCgYANlVXKhcbC0sAGgdFUAIO
ChZJdAsdTR0HDBFDUk43GkcrAAUdRyonBwpOTkJEUyo8RR8USSkOEENSSDdX
RSAdDRdLAA0HEAAeHQYRBDYJC00MDxVUZSFQOV1IJwYdB0dXHRwNAA9PGgMK
OwtTTSoBDBFPHU54W04mUhoPHgAdHEQAZGU/OjV6RSQMBwcNGA5SaTtfADsX
GUJHWREYSQAnSARTBjsIGwNOTgkVHRYANFNLJ1IIThVIHQYKAGQmBwcKLAwR
DB0HDxNPAU94Q083UhoaBkcTDRcAAgYCFkU1RQUEBwFBfjwdAChPTikBSR0T
TwRIEVIXBgcURTULFk0OBxMYTwFUN0oAIQAQBwkHVGIzQQAGBR8EdCwRCEkH
ElQcF0w0U05lUggAAwANBxAAHgoGAwkxRRMfDE4DARYbTn8aKmUxCBsURVQf
DVlOGwEWRTIXFwwCHUEVHRcAMlVDKRsHSUdMHQMAAC0dCAkcdCIeGAxOazkA
BEk2HQAjHA1OAFIbBxNJAEhJBxctDBwKSRoOVBwbTj8aQS4dBwlHKjUECQAa
BxscEDMNUhkBC0ETBxdULFUAJQAGARFJGk9FVAYGGlMNMRcXTRoBDxNPeG43
TQA7HRxJFUVUCQhBFAoNUwctRQYFDE43PT9SUDdJUydcSWRtcwANFVAHAU5T
FjtFGgwbCkEYBhlFeFsABRcbAwZOVCYEWgdPYyARNRcGAQwKQRYWUlQwXwAg
ExoLFAAcARFUBwFOUwImCgcDDU5rIAcXUj0dU2IcBk4TUh0YFUkASEkcC3QI
GwMMQkE9SB8AMk9TNlIOCxNUHQZCAAoAHh1FXjYCDBsFABkOBkk7FgALVQRO
D0EaDwxOSU8dGgI8EVIBAAUEVA5SRjlUQTYbCk5teRsdRVQcDhkDADBFHwhJ
AQ8XClJBNl4AC1IdBghVEwARABoHCAdFXjwdGEkDCBMHBgAwW1YnUgAaRyon
B0VTGgoZUwE7EhxNCAAFVAMXTjwaTSdSEAESUlQNBFJOZU5LXHQMHE0EF0EA
Bh9FeRp5LQdFTkAZREgMU04CEFMcMQQAQ0lkay0ABwcqXwA1FwgFAk4dBkIA
CA4aB0l0PD1MSQ8PEE87ADtbTmIGDAILAB0cRSo3ABwBRTYKFhROHUETCgZU
MVQHYhoGGksABwdJAB0ASTpFNwQcTRoDBBgDUkksGioRHUkKCE5THEVCC08E
EgF0BBwJSQoOGkgGADpfADETDU5tBzcJEFMLTx0bAHQJCx8ADRJUDRdMN1RH
YgYGTi5jMURFeQEaSRAEOkURDAUCQRkKUmQ5XgBIKwYbQFIRSBVJGgwBGgtz
RRNNDwcVWE8BT3hJVCcCSQwGQx9IBE4KTwwdASEXF01jIgQATwZIPRpXKwYK
BkdEGwsRTxxDSToGMUlSCQZOFRwKUkQ5VEMnUh0BR0MBGgAAZDwGUwY7CBdN
HB5BFwMdUz0aQSwWSQoITlMcRUILTxoCEDUXF01jNw4BTwVBNlRBYhAIGhNM
EUgIRU5CRFMkOhwGBAQLTVQOHFkvUkUwF0lkbXkbHUVUBgAcFA0gRQYFCBpB
PU8FQSsaVycTAkJHYhsRSQAXABxUFzFFFggICkEDHR1OPxoqER1JDQhNEUgK
TkJPDAUAJhwQAg0XQRUBFgArU04lUh0GDlNUGwpOCU9jeTY1HFJARE4xGA4L
ACxSQTZSDxsJSw1ICFUdBgpTNjUcXk0OAUEDBxtUPRpCLQtFTgBPVB8NSRoK
SREKLUUVAklkERgOCwAsUkE2Ug8bCUsNSAhVHQYKUyI7RQUFABoEVA0dWXQa
Ry1SHgYOVBFIB08XQ0kUCnRvPgwQTgUbGBwAOVREYhAGAQBJEUgETgpPGR8E
LUUGBQgaQRIaHEshGk03AQANR1QdBAkAFwAcUwE9AFxNY2QxGA4LACxSQTZS
DxsJSw1ICFUdBgpTJjsIF00GAE1ULB1NPRpPLF5JAgJUVAUAAAYKCAFFXjUe
DBBOFRwOBgA+T04pC0kDElMdC0VXBgYdFkU2CgtNEAEUVBwTWXhTVG5SGg8e
AB0cRSo+AwgKRSANExlJCBQaBAsANU9TKxFJL0dMHRwRTAtPBRwQMAAATQcB
FlRlIkw5QwA2GggaR0YBBg5ZTgIcAAw3SVIaAQcVEU8QTyEaYy0fDE4ITlhI
Jk8DCkkcC3hFMQIEC0EbAVIqCFZBO1IdBgZUVA4QTgUWSR4QJwwRTWM="""
strrr = """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
GhsLdAYJAUkVHB0PdB0HWw=="""
s1 = "this is a test"
s2 = "wokka wokka!!!"

# s1 = """Burning 'em, if you ain't quick and nimble
# I go crazy when I hear a cymbal"""
#s2 = "ICE"


s1_bytes = bytes(s1, "utf-8")
s2_bytes = bytes(s2, "utf-8")


def hamming_distance(bytes1, bytes2):
    # compute amount of differing bits given to bytes objects
    sum = 0
    for i in range(len(bytes1)):
        diff = bytes1[i] ^ bytes2[i]
        sum += bin(diff).count("1")
    return sum


def score_key_size(key_size: int, text_bytes: bytes):
    # score single key_size guess, taking pairwise hamming distances
    dlist = []
    for i in range(50):
        try:
            start = i * key_size
            mid = start + key_size
            end = mid + key_size
            dist = hamming_distance(text_bytes[start:mid], text_bytes[mid:end])
            dlist.append(dist / key_size)
        except IndexError:
            break
    return sum(dlist) / 50


def get_key_size(text_bytes):
    # try set of key size guess and score each, return key size with the lowest score
    scores = {}
    for guess in range(2, 41):
        scores[guess] = score_key_size(guess, text_bytes)
    return sorted(scores.items(), key=lambda item: item[1])[0][0]


def get_blocks(text_bytes, key_size):
    blocks = []
    i = 0
    while i * key_size < len(text_bytes):
        blocks.append(text_bytes[key_size * i: key_size * (i+1)])
        i += 1
    return blocks 


def transpose_blocks(blocks, key_size):
    transposed = []
    for i in range(key_size):
        temp = b''
        for j in range(len(blocks)):
            try:
                # print(blocks[j][i])
                temp += bytes([blocks[j][i]])
            except:
                continue
        # print(temp)
        transposed.append(temp)
    return transposed


def score_bytes(array):
    character_frequencies = {
        'a': .08167, 'b': .01492, 'c': .02782, 'd': .04253,
        'e': .12702, 'f': .02228, 'g': .02015, 'h': .06094,
        'i': .06094, 'j': .00153, 'k': .00772, 'l': .04025,
        'm': .02406, 'n': .06749, 'o': .07507, 'p': .01929,
        'q': .00095, 'r': .05987, 's': .06327, 't': .09056,
        'u': .02758, 'v': .00978, 'w': .02360, 'x': .00150,
        'y': .01974, 'z': .00074, ' ': .13000
    }
    return sum([character_frequencies.get(chr(array[i]).lower(), 0) for i in range(len(array))])


def find_key(bytes_in):
    scores = []
    for i in range(256):
        decoded_bytes = [bytes_in[j] ^ i for j in range(len(bytes_in))]
        cur_score = score_bytes(decoded_bytes)
        scores.append([cur_score, bytearray(decoded_bytes), chr(i)])

    sorted_guesses = sorted(scores, key=operator.itemgetter(0), reverse=True)
    return sorted_guesses[0]


# print(get_key_size(out))
file_bytes = base64.b64decode(strrr)
key_size = get_key_size(file_bytes)
blocks = get_blocks(file_bytes, key_size)
# print(blocks)
transposed = transpose_blocks(blocks, key_size)
# print(transposed)
key = ""
for block in transposed:
    key += find_key(block)[2]
key_bytes = bytes(key, "utf-8")

out = b''
for i in range(len(file_bytes)):
    out += bytearray([file_bytes[i] ^ key_bytes[i % len(key_bytes)]])

print(out.decode())
